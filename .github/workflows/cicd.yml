name: CI/CD for Dockerized Flask App

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:                                          # Le premier job, appelé build-and-test, tourne sur un environnement Ubuntu (machine virtuelle hébergée par GitHub).
    build-and-test:                            # unit testing
        runs-on: ubuntu-latest                 # container

        steps:                                 # différents test
        - name: Chekout code                   # Télécharge mon code du repo dans la machine GitHub
          uses: actions/checkout@v3
        
        - name: Set up Python 
          uses: actions/setup-python@v4
          with:
            python-version: '3.9'

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install flask
            pip install pytest
        
        - name: Run tests
          run:
            pytest
    
    build-and-publish:                         # liaison entre CI et CD
        needs: build-and-test
        runs-on: ubuntu-latest

        steps:
        - name: Checkout code
          uses: actions/checkout@v3
        
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2            # Configure Docker Buildx, utile pour créer et publier des images Docker multiplateformes.

        - name: Login to Dockerhub                       # Se connecte à mon compte Docker Hub pour pouvoir y pousser l’image.
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}     # Céés dans Github

        - name: Build and push Docker image
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest      # Construit l’image Docker depuis le dossier courant . et la pousse sur ton Docker Hub, sous le tag : tags : ...

        - name: Image digest
          run: echo ${{ steps.build-and-publish.outputs.digest }}      # Affiche le digest (identifiant unique) de l’image Docker créée. Utile pour vérif/traçabilité.